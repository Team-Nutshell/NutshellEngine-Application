# Python script used to auto-generate the scriptable factory
# Called from CMake

import sys
import os
import re

scriptNames = []

outputFile = open(sys.argv[1] + "/scripts/ntshengn_scriptable_factory.h", "w")
output = "// Auto-generated by generate_scriptable_factory.py from CMake\n\n"
output += "#pragma once\n"
output += "#include \"../Core/Common/ecs/components/ntshengn_ecs_scriptable.h\"\n"
output += "#include <string>\n\n"
for filePath in os.listdir(sys.argv[1] + "/scripts/"):
	if ((filePath != "generate_scriptable_factory.py") and (filePath != "ntshengn_scriptable_factory.h")):
		with open(sys.argv[1] + "/scripts/" + filePath, 'r') as file:
			fileContent = file.read()
			scriptName = re.search("NTSHENGN_SCRIPT(.*)", fileContent)
			if (scriptName != None):
				output += "#include \"" + filePath + "\"\n"
				scriptNames.append(scriptName.group()[16:len(scriptName.group()) - 2].strip())
if (len(scriptNames) != 0):
	output += "\n"

output += "namespace NtshEngn {\n\n"
output += "\tnamespace ScriptableFactory {\n\n"
output += "\t\tScriptable createScriptable(const std::string& scriptName) {\n"
if (len(scriptNames) == 0):
	output += "\t\t\tNTSHENGN_UNUSED(scriptName);\n\n"
output += "\t\t\tScriptable scriptable;\n\n"
for i, scriptName in enumerate(scriptNames):
	output += "\t\t\t"
	if (i != 0):
		output += "else "
	output += "if (scriptName == \"" + scriptName + "\") { scriptable.script = std::make_unique<" + scriptName + ">(); }\n"
output += "\n\t\t\treturn scriptable;\n"
output += "\t\t}"
output += "\n\n\t}"
output += "\n\n}"

outputFile.write(output)