# Python script used to auto-generate the script manager
# Called from CMake

import sys
import os
import re

scriptNames = []

outputFile = open(sys.argv[1] + "/scripts/script_manager/ntshengn_script_manager.cpp", "w")
output = "// This file is automatically generated by generate_script_manager.py from CMake\n\n"
output += "#include \"ntshengn_script_manager.h\"\n\n"
for filePath in os.listdir(sys.argv[1] + "/scripts/"):
	if os.path.isfile(sys.argv[1] + "/scripts/" + filePath):
		with open(sys.argv[1] + "/scripts/" + filePath, 'r') as file:
			fileContent = file.read()
			scriptName = re.search("NTSHENGN_SCRIPT(.*)", fileContent)
			if (scriptName != None):
				output += "#include \"../" + filePath + "\"\n"
				scriptNames.append(scriptName.group()[16:len(scriptName.group()) - 2].strip())
if (len(scriptNames) != 0):
	output += "\n"

output += "NtshEngn::Scriptable NtshEngn::ScriptManager::createScriptable(const std::string& scriptName) {\n"
if (len(scriptNames) == 0):
	output += "\tNTSHENGN_UNUSED(scriptName);\n\n"
output += "\tScriptable scriptable;\n\n"
for i, scriptName in enumerate(scriptNames):
	output += "\t"
	if (i != 0):
		output += "else "
	output += "if (scriptName == \"" + scriptName + "\") { scriptable.script = createScript<" + scriptName + ">(); }\n"
if (len(scriptNames) != 0):
	output += "\n"
output += "\treturn scriptable;\n"
output += "}\n\n"
output += "extern \"C\" NTSHENGN_SCRIPT_MANAGER_API NtshEngn::ScriptManagerInterface* createScriptManager() {\n"
output += "\treturn new NtshEngn::ScriptManager;\n"
output += "}\n\n"
output += "extern \"C\" NTSHENGN_SCRIPT_MANAGER_API void destroyScriptManager(NtshEngn::ScriptManagerInterface* sm) {\n"
output += "\tdelete sm;\n"
output += "}"

outputFile.write(output)